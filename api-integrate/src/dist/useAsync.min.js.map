{"version":3,"sources":["useAsync.js"],"names":["_react","require","reducer","state","action","type","loading","data","error","Error","useAsync","callback","fetchData","regeneratorRuntime","async","_context","prev","next","awrap","sent","dispatch","t0","stop","deps","arguments","length","undefined","skip","_useReducer2","_slicedToArray","useReducer","useEffect"],"mappings":"2FAAA,IAAAA,OAAAC,QAAA,+mBAEA,SAASC,QAAQC,EAAOC,GACtB,OAAQA,EAAOC,MACb,IAAK,UACH,MAAO,CACLC,SAAS,EANjBC,KAAA,KAQQC,MAAO,MAEX,IAAK,UACH,MAAO,CACLF,SAAS,EACTC,KAAMH,EAAOG,KACbC,MAAM,MAEV,IAAK,QAdT,MAASN,CACPI,SAAeD,EACbE,KAAK,KACHC,MAAOJ,EAAAI,OAELD,QACAC,MAAAA,IAAOC,MAAPD,yBAAAA,OAAOJ,EAAAC,QAGT,SAAAK,SAAOC,GAMA,SAAPC,IAAO,IAAAL,EAAA,OAAAM,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OACLX,EAAAA,CAAAA,KAAS,YADJS,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAK,MAGSV,KAHT,KAAA,EAGLA,EAHKO,EAAAI,KAAAC,EAAP,CAAAf,KAAA,UAAAE,KAAAA,IAAOQ,EAAAE,KAAA,GAAA,MAAA,KAAA,EAAAF,EAAAC,KAAA,EAAAD,EAAAM,GAAAN,EAAA,MAAA,GAKTK,EAAA,CAAAf,KAAA,QAAAG,MAAAO,EAAAM,KALS,KAAA,GAAA,IAAA,MAAA,OAAAN,EAAAO,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,KANA,IAAAC,EAAA,EAAAC,UAAAC,aAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAA,GAAAG,EAAA,EAAAH,UAAAC,aAAAC,IAAAF,UAAA,IAAAA,UAAA,GAAAI,EAAAC,gBAAA,EAAA7B,OAAA8B,YAAA5B,QAAA,CAELK,SAAI,EACJC,KAAAA,KAHKA,OAAP,IAAO,GACLF,EADKsB,EAAA,GACER,EADFQ,EAAA,GAkBTtB,OAJH,EAAAN,OAAA+B,WAAA,WAmBIJ,GAjBLf,KAqBIW,GAnBAjB,CAAAA,EAASM,gBAFwCF","file":"useAsync.min.js","sourcesContent":["import {useReducer, useEffect} from 'react';\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'LOADING':\n      return {\n        loading: true,\n        data: null,\n        error: null\n      };\n    case 'SUCCESS':\n      return {\n        loading: false,\n        data: action.data,\n        error:null\n      };\n    case 'ERROR':\n      return {\n        loading: false, \n        data: null,\n        error: action.error\n      };\n    default: \n      throw new Error(`Unhanled action type: ${action.type}`);\n  }\n}\n\nfunction useAsync(callback, deps = [], skip = false) {\n  const [state, dispatch] = useReducer(reducer, {\n    loading: false, \n    data: null,\n    error: false\n  });\n\n  const fetchData = async () => {\n    dispatch({type: 'LOADING'});\n    try {\n      const data = await callback();\n      dispatch({type: 'SUCCESS', data});\n    } catch (e) {\n      dispatch({type: 'ERROR', error: e})\n    }\n  };\n useEffect(()=> {\n  if(skip) return;\n    fetchData();\n    //eslint 설정을 다음 줄에서만 비활성화 \n    //eslint-disable-next-line\n }, deps);\n\n return [state, fetchData];\n}\n\nexport default useAsync;"]}